name: Auto Update Cursor Version Info

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch:  # Allow manual trigger

jobs:
  update-versions:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
      statuses: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Update version info
        id: update
        run: |
          python main.py --verbose
          # Check if there are any changes
          git diff --quiet versions.json README.md || echo "has_changes=true" >> $GITHUB_OUTPUT
        
      # Create and auto-merge PR if there are changes
      - name: Create and auto-merge PR
        if: steps.update.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "auto: update version data and README"
          title: "Auto Update: Cursor Version Data"
          body: |
            This PR was automatically generated by GitHub Actions to update Cursor version data.
            
            Updates:
            - Updated versions.json
            - Updated README.md timestamp
            
            As this is part of the automated workflow, this PR will be automatically merged.
          branch: "auto-update-versions"
          base: "main"
          delete-branch: true
      
      # Get the PR number that was just created
      - name: Get PR number
        if: steps.update.outputs.has_changes == 'true'
        id: pr
        run: |
          PR_NUMBER=$(gh pr list --state open --head auto-update-versions --json number -q '.[0].number')
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Add necessary approval
      - name: Approve PR
        if: steps.update.outputs.has_changes == 'true' && steps.pr.outputs.pr_number != ''
        run: |
          gh pr review ${{ steps.pr.outputs.pr_number }} --approve -b "Automatically approved"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Merge the PR
      - name: Merge PR
        if: steps.update.outputs.has_changes == 'true' && steps.pr.outputs.pr_number != ''
        run: |
          gh pr merge ${{ steps.pr.outputs.pr_number }} --auto --merge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 